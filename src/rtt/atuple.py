from datetime import datetime, timezone
  
from src.ids_codes.Rui import Rui, RuiStatus

class RtTuple:
	def __init__(self, ruit=None):
		self.ruit = ruit if ruit else Rui(RuiStatus.assigned)

	def get_ruit(self):
		return self.ruit 


class Atuple(RtTuple):
	"""Referent Tracking assignment tuple that registers assignment of an RUI to a PoR
	
	Attributes:
	ar -- The status of ruip
	ruip -- The Rui that is being assigned for the first time
	ruia -- The Rui of the author of this Atuple
	unique -- 
	t -- The time of the creation of the Atuple
	"""

	def __init__(self, ruip=None, ruia=None, ruit=None, unique="-SU", ar=RuiStatus.assigned, t=datetime.now(timezone.utc)):
		super().__init__(ruit)

		# If we don't get a value for whether the Rui is assigned or reserved
		#	then we assume that it is assigned
		self.ar = ar

		# If we don't get a Ruip, then we'll create one on the fly
		self.ruip = ruip if ruip else Rui(self.ar)
		
		# If we don't get an author Rui for the tuple, then autogenerate one,
		#	unless we don't get a Ruip either, in which case set it to the
		#	autogenerated Ruip. 
		# This means that the default behavior is that if neither Ruia nor Ruip
		#	are provided, we are assuming some entity is assigning a Ruip to 
		#	itself, and thus should be equal
		self.ruia = ruia
		if self.ruia is None:
			print(self.ruip.uuid)
			self.ruia = Rui(self.ruip.status, self.ruip.uuid)

		self.unique = unique
		self.t = t

	def getTimestamp(self):
		return self.t
